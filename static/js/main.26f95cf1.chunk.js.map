{"version":3,"sources":["components/RepoCard.js","containers/github/index.js","containers/programmingQuote/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","repo","name","language","description","href","html_url","rel","target","moment","pushed_at","format","toString","sortRepos","a","b","dateOne","Date","parse","dateTwo","Github","cachedRepos","JSON","sessionStorage","getItem","cachedUser","useQuery","fetch","method","headers","Accept","then","res","get","error","message","resetTime","json","data","filteredData","filter","owner","login","fork","setItem","stringify","enabled","isLoading","newData","sort","reverse","Fragment","src","avatar_url","style","width","height","alt","map","key","id","RepoCard","ProgrammingQuote","en","author","App","config","queries","refetchOnWindowFocus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.26f95cf1.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card bg-dark w-100 h-100\">\n      <div className=\"card-header d-flex justify-content-between align-items-center\">\n        <h5>{props.repo.name}</h5>\n        <h6>{props.repo.language}</h6>\n      </div>\n      <div className=\"card-body d-flex flex-column\">\n        <p className=\"card-text\">{props.repo.description}</p>\n        <a\n          href={props.repo.html_url}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          className=\"btn btn-primary mt-auto stretched-link\"\n        >\n          View\n        </a>\n      </div>\n      <div className=\"card-footer text-muted\">\n        Last push {moment(props.repo.pushed_at).format(\"DD/MM/YYYY\").toString()}\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport RepoCard from \"../../components/RepoCard\";\n\nfunction sortRepos(a, b) {\n  const dateOne = Date.parse(a.pushed_at);\n  const dateTwo = Date.parse(b.pushed_at);\n\n  if (dateOne < dateTwo) {\n    return -1;\n  }\n  if (dateOne > dateTwo) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction Github() {\n  const cachedRepos = JSON.parse(sessionStorage.getItem(\"cached-repos\"));\n  const cachedUser = JSON.parse(sessionStorage.getItem(\"cached-user\"));\n\n  const { isLoading, error, data } = useQuery(\n    \"githubProjects\",\n    () =>\n      fetch(\"https://api.github.com/users/xufysz/repos\", {\n        method: \"get\",\n        headers: {\n          Accept: \"application/vnd.github.inertia-preview+json\",\n        },\n      }).then((res) => {\n        if (res.headers.get(\"X-Ratelimit-Remaining\") <= 0) {\n          return {\n            error: {\n              message: \"Rate limit exceeded\",\n              resetTime: new Date(res.headers.get(\"X-Ratelimit-Reset\") * 1000),\n            },\n          };\n        }\n\n        return res.json().then((data) => {\n          let filteredData = data.filter((repo) => {\n            return repo.owner.login === \"Xufysz\" && repo.fork === false;\n          });\n\n          sessionStorage.setItem(\n            \"cached-user\",\n            JSON.stringify(filteredData[0].owner)\n          );\n\n          sessionStorage.setItem(\"cached-repos\", JSON.stringify(data));\n          return data;\n        });\n      }),\n    {\n      enabled: cachedRepos == null,\n    }\n  );\n\n  if (isLoading) return \"\";\n  if (error) return \"An error has occurred: \" + error.message;\n  if (data && data.error)\n    return \"Github usage exceeded until \" + data.error.resetTime;\n\n  let newData = data ?? cachedRepos;\n\n  newData = newData\n    .filter((repo) => {\n      return repo.owner.login === \"Xufysz\" && repo.fork === false;\n    })\n    .sort(sortRepos)\n    .reverse();\n\n  return (\n    <React.Fragment>\n      <div className=\"row text-center\">\n        <div className=\"col\">\n          <img\n            src={cachedUser.avatar_url}\n            style={{ width: \"100px\", height: \"100px\" }}\n            className=\"img-thumbnail rounded-circle\"\n            alt=\"Kyle's Github Avatar\"\n          />\n          <h2>GitHub</h2>\n        </div>\n      </div>\n      <div className=\"row row-cols-1 row-cols-md-1 row-cols-lg-3 g-4\">\n        {newData.map((repo) => {\n          return (\n            <div key={repo.id} className=\"col\">\n              <RepoCard repo={repo} />\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Github;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\n\nfunction ProgrammingQuote() {\n  const { isLoading, error, data } = useQuery(\"randomProgrammingQuote\", () =>\n    fetch(\"https://programming-quotes-api.herokuapp.com/quotes/random\", {\n      method: \"get\",\n    }).then((res) => res.json())\n  );\n\n  if (isLoading || error) return \"\";\n\n  return (\n    <figure>\n      <blockquote className=\"blockquote\">\n        <p>{data.en}</p>\n      </blockquote>\n      <figcaption className=\"blockquote-footer\">{data.author}</figcaption>\n    </figure>\n  );\n}\n\nexport default ProgrammingQuote;\n","import React from \"react\";\nimport \"./App.css\";\nimport Github from \"./containers/github\";\nimport { ReactQueryConfigProvider } from \"react-query\";\nimport ProgrammingQuote from \"./containers/programmingQuote\";\n\nfunction App() {\n  const queryConfig = { queries: { refetchOnWindowFocus: false } };\n\n  return (\n    <ReactQueryConfigProvider config={queryConfig}>\n      <div className=\"App bg-dark bg-gradient text-white py-3\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12 text-center\">\n              <h1>Hi, I'm Kyle</h1>\n              <ProgrammingQuote />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <Github />\n            </div>\n          </div>\n        </div>\n      </div>\n    </ReactQueryConfigProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}